name: CustomAlerts
main: CustomAlerts\CustomAlerts
version: "1.6"
api: [1.12.0]
load: STARTUP
author: EvolSoft
description: Customize alerts (join/leave messages, etc...)
website: http://www.evolsoft.tk

commands:
  customalerts:
    aliases: [calerts]
    description: CustomAlerts Commands.
    permission: customalerts
permissions:
  customalerts:
    default: op
    description: CustomAlerts permissions.
    children:
      customalerts.help:
        default: op
        description: CustomAlerts command Help permission.
      customalerts.info:
        default: op
        description: CustomAlerts command Info permission.
      customalerts.reload:
        default: op
        description: CustomAlerts command Reload permission.<?php

/*
 * CustomAlerts (v1.6) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 14/07/2015 01:34 PM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/CustomAlerts/blob/master/LICENSE)
 */

namespace CustomAlerts;

use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\entity\Living;
use pocketmine\event\entity\EntityDamageByBlockEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\level\Level;
use pocketmine\Player;
use pocketmine\plugin\PluginBase;
use pocketmine\Server;
use pocketmine\utils\Config;
use pocketmine\utils\TextFormat;

class CustomAlerts extends PluginBase {
    
	//About Plugin Const
	
	/** @var string PRODUCER Plugin producer */
	const PRODUCER = "EvolSoft";
	
	/** @var string VERSION Plugin version */
	const VERSION = "1.6";
	
	/** @var string MAIN_WEBSITE Plugin producer website */
	const MAIN_WEBSITE = "http://www.evolsoft.tk";
	
	//Other Const
	
	/** @var string PREFIX Plugin prefix */
	const PREFIX = "&b[&aCustom&cAlerts&b] ";
	
	//Messages
	
	/** @var string $message_motd The current motd message */
	private $message_motd;
	
	/** @var string $message_outdated_client The current outdated client message */
	private $message_outdated_client;
	
	/** @var string $message_outdated_server The current outdated server message */
	private $message_outdated_server;
	
	/** @var string $message_whitelist The current whitelist message */
	private $message_whitelist;
	
	/** @var string $message_fullserver The current full server message */
	private $message_fullserver;
	
	/** @var string $message_join The current join message */
	private $message_join;
	
	/** @var string $message_quit The current quit message */
	private $message_quit;
	
	/** @var string $message_world_change The current world change message */
	private $message_world_change;
	
	/** @var string $message_death The current death message */
	private $message_death;
	
	/** @var CustomAlerts $instance Plugin instance */
	private static $instance = null;
	
	/**
	 * Get CustomAlerts API
	 *
	 * @return CustomAlerts CustomAlerts API
	 */
	public static function getAPI(){
		return self::$instance;
	}
	
	public function onLoad(){
		if(!self::$instance instanceof CustomAlerts){
			self::$instance = $this;
		}
	}
	
	/**
	 * Translate Minecraft colors
	 *
	 * @param char $symbol Color symbol
	 * @param string $message The message to be translated
	 *
	 * @return string The translated message
	 */
	public function translateColors($symbol, $message){
	
		$message = str_replace($symbol."0", TextFormat::BLACK, $message);
		$message = str_replace($symbol."1", TextFormat::DARK_BLUE, $message);
		$message = str_replace($symbol."2", TextFormat::DARK_GREEN, $message);
		$message = str_replace($symbol."3", TextFormat::DARK_AQUA, $message);
		$message = str_replace($symbol."4", TextFormat::DARK_RED, $message);
		$message = str_replace($symbol."5", TextFormat::DARK_PURPLE, $message);
		$message = str_replace($symbol."6", TextFormat::GOLD, $message);
		$message = str_replace($symbol."7", TextFormat::GRAY, $message);
		$message = str_replace($symbol."8", TextFormat::DARK_GRAY, $message);
		$message = str_replace($symbol."9", TextFormat::BLUE, $message);
		$message = str_replace($symbol."a", TextFormat::GREEN, $message);
		$message = str_replace($symbol."b", TextFormat::AQUA, $message);
		$message = str_replace($symbol."c", TextFormat::RED, $message);
		$message = str_replace($symbol."d", TextFormat::LIGHT_PURPLE, $message);
		$message = str_replace($symbol."e", TextFormat::YELLOW, $message);
		$message = str_replace($symbol."f", TextFormat::WHITE, $message);
	
		$message = str_replace($symbol."k", TextFormat::OBFUSCATED, $message);
		$message = str_replace($symbol."l", TextFormat::BOLD, $message);
		$message = str_replace($symbol."m", TextFormat::STRIKETHROUGH, $message);
		$message = str_replace($symbol."n", TextFormat::UNDERLINE, $message);
		$message = str_replace($symbol."o", TextFormat::ITALIC, $message);
		$message = str_replace($symbol."r", TextFormat::RESET, $message);
	
		return $message;
	}
	
    public function onEnable(){
    	@mkdir($this->getDataFolder());
    	@mkdir($this->getDataFolder() . "data/");
    	$this->saveDefaultConfig();
    	$this->cfg = $this->getConfig()->getAll();
    	$this->getCommand("customalerts")->setExecutor(new Commands\Commands($this));
    	$this->getServer()->getPluginManager()->registerEvents(new EventListener($this), $this);
    	$this->getServer()->getScheduler()->scheduleRepeatingTask(new MotdTask($this), 20);
    }
    
    //API Functions
    
    /** @var string API_VERSION CustomAlerts API version */
    const API_VERSION = "1.2";
    
    /**
     * Get CustomAlerts version
     *
     * @return string CustomAlerts version
     */
    public function getVersion(){
    	return CustomAlerts::VERSION;
    }
    
    /**
     * Get CustomAlerts API version
     *
     * @return string CustomAlerts API version
     */
    public function getAPIVersion(){
    	return CustomAlerts::API_VERSION;
    }
    
    /**
     * @deprecated
     * Register Plugin as CustomAlerts Extension
     * 
     * @param PluginBase $extension The Plugin to register as extension
     * @param int $priority (optional)
     */
    public function registerExtension(PluginBase $extension, $priority = null){
    	Server::getInstance()->getLogger()->warning("This function has been deprecated since CustomAlerts API v1.1");
    }
    
    /**
     * @deprecated
     * Get all CustomAlerts loaded extensions
     * 
     * @param int $priority (optional)
     * 
     * @return array All CustomAlerts loaded extensions if no priority specified, otherwise returns all extesions with the specified priority
     */
    public function getAllExtensions($priority = null){
    	Server::getInstance()->getLogger()->warning("This function has been deprecated since CustomAlerts API v1.1");
    }
    
    /**
     * Check if motd is custom
     * 
     * @return boolean
     */
    public function isMotdCustom(){
    	$cfg = $this->getConfig()->getAll();
    	return $cfg["Motd"]["custom"];
    }
    
    /**
     * Get default motd message
     *
     * @return string The default motd message
     */
    public function getDefaultMotdMessage(){
    	$cfg = $this->getConfig()->getAll();
    	$message = $cfg["Motd"]["message"];
    	$message = str_replace("{MAXPLAYERS}", $this->getServer()->getMaxPlayers(), $message);
    	$message = str_replace("{TOTALPLAYERS}", count($this->getServer()->getOnlinePlayers()), $message);
    	$message = str_replace("{TIME}", date($cfg["datetime-format"]), $message);
    	return $this->translateColors("&", $message);
    }
    
    /**
     * Get current motd message
     *
     * @return string The current motd message
     */
    public function getMotdMessage(){
    	return $this->message_motd;
    }
    
    /**
     * Set current motd message
     *
     * @param string $message The message
     */
    public function setMotdMessage($message){
    	$this->message_motd = $message;
    	$this->getServer()->getNetwork()->setName($this->message_motd);
    }
    
    /**
     * Check if outdated client message is custom
     *
     * @return boolean
     */
    public function isOutdatedClientMessageCustom(){
    	$cfg = $this->getConfig()->getAll();
    	return $cfg["OutdatedClient"]["custom"];
    }
    
    /**
     * Get default outdated client message
     *
     * @return string The default outdated client message
     */
    public function getDefaultOutdatedClientMessage(Player $player){
    	$cfg = $this->getConfig()->getAll();
    	$message = $cfg["OutdatedClient"]["message"];
    	$message = str_replace("{PLAYER}", $player->getName(), $message);
    	$message = str_replace("{MAXPLAYERS}", $this->getServer()->getMaxPlayers(), $message);
    	$message = str_replace("{TOTALPLAYERS}", count($this->getServer()->getOnlinePlayers()), $message);
    	$message = str_replace("{TIME}", date($cfg["datetime-format"]), $message);
    	return $this->translateColors("&", $message);
    }
    
    /**
     * Get current outdated client message
     *
     * @return string The current outdated client message
     */
    public function getOutdatedClientMessage(){
    	return $this->message_outdated_client;
    }
    
    /**
     * Set current outdated client message
     *
     * @param string $message The message
     */
    public function setOutdatedClientMessage($message){
    	$this->message_outdated_client = $message;
    }
    
    /**
     * Check if outdated server message is custom
     *
     * @return boolean
     */
    public function isOutdatedServerMessageCustom(){
    	$cfg = $this->getConfig()->getAll();
    	return $cfg["OutdatedServer"]["custom"];
    }
    
    /**
     * Get default outdated server message
     *
     * @return string The default outdated server message
     */
    public function getDefaultOutdatedServerMessage(Player $player){
    	$cfg = $this->getConfig()->getAll();
    	$message = $cfg["OutdatedServer"]["message"];
    	$message = str_replace("{PLAYER}", $player->getName(), $message);
    	$message = str_replace("{MAXPLAYERS}", $this->getServer()->getMaxPlayers(), $message);
    	$message = str_replace("{TOTALPLAYERS}", count($this->getServer()->getOnlinePlayers()), $message);
    	$message = str_replace("{TIME}", date($cfg["datetime-format"]), $message);
    	return $this->translateColors("&", $message);
    }
    
    /**
     * Get current outdated server message
     *
     * @return string The current outdated server message
     */
    public function getOutdatedServerMessage(){
    	return $this->message_outdated_server;
    }
    
    /**
     * Set current outdated server message
     *
     * @param string $message The message
     */
    public function setOutdatedServerMessage($message){
    	$this->message_outdated_server = $message;
    }
    
    /**
     * Check if whitelist message is custom
     *
     * @return boolean
     */
    public function isWhitelistMessageCustom(){
    	$cfg = $this->getConfig()->getAll();
    	return $cfg["WhitelistedServer"]["custom"];
    }
    
    /**
     * Get default whitelist message
     *
     * @return string The default whitelist message
     */
    public function getDefaultWhitelistMessage(Player $player){
    	$cfg = $this->getConfig()->getAll();
    	$message = $cfg["WhitelistedServer"]["message"];
    	$message = str_replace("{PLAYER}", $player->getName(), $message);
    	$message = str_replace("{MAXPLAYERS}", $this->getServer()->getMaxPlayers(), $message);
    	$message = str_replace("{TOTALPLAYERS}", count($this->getServer()->getOnlinePlayers()), $message);
    	$message = str_replace("{TIME}", date($cfg["datetime-format"]), $message);
    	return $this->translateColors("&", $message);
    }
    
    /**
     * Get current whitelist message
     *
     * @return string The current whitelist message
     */
    public function getWhitelistMessage(){
    	return $this->message_whitelist;
    }
    
    /**
     * Set current whitelist message
     *
     * @param string $message The message
     */
    public function setWhitelistMessage($message){
    	$this->message_whitelist = $message;
    }
    
    /**
     * Check if full server message is custom
     *
     * @return boolean
     */
    public function isFullServerMessageCustom(){
    	$cfg = $this->getConfig()->getAll();
    	return $cfg["FullServer"]["custom"];
    }
    
    /**
     * Get default full server message
     *
     * @return string The default full server message
     */
    public function getDefaultFullServerMessage(Player $player){
    	$cfg = $this->getConfig()->getAll();
    	$message = $cfg["FullServer"]["message"];
    	$message = str_replace("{PLAYER}", $player->getName(), $message);
    	$message = str_replace("{MAXPLAYERS}", $this->getServer()->getMaxPlayers(), $message);
    	$message = str_replace("{TOTALPLAYERS}", count($this->getServer()->getOnlinePlayers()), $message);
    	$message = str_replace("{TIME}", date($cfg["datetime-format"]), $message);
    	return $this->translateColors("&", $message);
    }
    
    /**
     * Get current full server message
     *
     * @return string The current full server message
     */
    public function getFullServerMessage(){
    	return $this->message_fullserver;
    }
    
    /**
     * Set current full server message
     *
     * @param string $message The message
     */
    public function setFullServerMessage($message){
    	$this->message_fullserver = $message;
    }
    
    
    /**
     * Get if default first join message is enabled
     * 
     * @return boolean
     */
    public function isDefaultFirstJoinMessageEnabled(){
    	$cfg = $this->getConfig()->getAll();
    	return $cfg["FirstJoin"]["enable"];
    }

    /**
     * Get default first join message
     * 
     * @param Player $player
     * 
     * @return string The default first join message
     */
    public function getDefaultFirstJoinMessage(Player $player){
    	$cfg = $this->getConfig()->getAll();
    	$message = $cfg["FirstJoin"]["message"];
    	$message = str_replace("{PLAYER}", $player->getName(), $message);
    	$message = str_replace("{MAXPLAYERS}", $this->getServer()->getMaxPlayers(), $message);
    	$message = str_replace("{TOTALPLAYERS}", count($this->getServer()->getOnlinePlayers()), $message);
    	$message = str_replace("{TIME}", date($cfg["datetime-format"]), $message);
    	return $this->translateColors("&", $message);
    }
    
    /**
     * Register the first join of a player (don't use this function)
     * @param Player $player
     */
    public function registerFirstJoin(Player $player){
    	$cfg = new Config($this->getDataFolder() . "data/" . strtolower($player->getName() . ".dat"));
    	$cfg->save();
    }
    
    /**
     * Check if a player has joined for the first time
     * 
     * @param Player $player
     * 
     * @return boolean
     */
    public function hasJoinedFirstTime(Player $player){
    	if(file_exists($this->getDataFolder() . "data/" . strtolower($player->getName() . ".dat"))){
    		return false;
    	}else{
    		return true;
    	}
    }
    
    /**
     * Check if default join message is custom
     * 
     * @return boolean
     */
    public function isDefaultJoinMessageCustom(){
    	$cfg = $this->getConfig()->getAll();
    	return $cfg["Join"]["custom"];
    }
    
    /**
     * Check if default join message is hidden
     *
     * @return boolean
     */
    public function isDefaultJoinMessageHidden(){
    	$cfg = $this->getConfig()->getAll();
    	return $cfg["Join"]["hide"];
    }
    
    /**
     * Get default join message
     * 
     * @param Player $player
     * 
     * @return string The default join message
     */
    public function getDefaultJoinMessage(Player $player){
    	$cfg = $this->getConfig()->getAll();
    	$message = $cfg["Join"]["message"];
    	$message = str_replace("{PLAYER}", $player->getName(), $message);
    	$message = str_replace("{MAXPLAYERS}", $this->getServer()->getMaxPlayers(), $message);
    	$message = str_replace("{TOTALPLAYERS}", count($this->getServer()->getOnlinePlayers()), $message);
    	$message = str_replace("{TIME}", date($cfg["datetime-format"]), $message);
    	return $this->translateColors("&", $message);
    }
    
    /**
     * Get current join message
     * 
     * @return string The current join message
     */
    public function getJoinMessage(){
    	return $this->message_join;
    }
    
    /**
     * Set current join message
     * 
     * @param string $message The message
     */
    public function setJoinMessage($message){
    	$this->message_join = $message;
    }
    
    /**
     * Check if default quit message is custom
     *
     * @return boolean
     */
    public function isQuitCustom(){
    	$cfg = $this->getConfig()->getAll();
    	return $cfg["Quit"]["custom"];
    }
    
    /**
     * Check if default quit message is hidden
     *
     * @return boolean
     */
    public function isQuitHidden(){
    	$cfg = $this->getConfig()->getAll();
    	return $cfg["Quit"]["hide"];
    }
    
    /**
     * Get default quit message
     * 
     * @param Player $player
     * 
     * @return string The default quit message
     */
    public function getDefaultQuitMessage(Player $player){
    	$cfg = $this->getConfig()->getAll();
    	$message = $cfg["Quit"]["message"];
    	$message = str_replace("{PLAYER}", $player->getName(), $message);
    	$message = str_replace("{MAXPLAYERS}", $this->getServer()->getMaxPlayers(), $message);
    	$message = str_replace("{TOTALPLAYERS}", count($this->getServer()->getOnlinePlayers()), $message);
    	$message = str_replace("{TIME}", date($cfg["datetime-format"]), $message);
    	return $this->translateColors("&", $message);
    }
    
    /**
     * Get current quit message
     * 
     * @return string The current quit message
     */
    public function getQuitMessage(){
    	return $this->message_quit;
    }
    
    /**
     * Set current quit message
     * 
     * @param string $message The message
     */
    public function setQuitMessage($message){
    	$this->message_quit = $message;
    }
    
    /**
     * Get if default world change message is enabled
     *
     * @return boolean
     */
    public function isDefaultWorldChangeMessageEnabled(){
    	$cfg = $this->getConfig()->getAll();
    	return $cfg["WorldChange"]["enable"];
    }
    
    /**
     * Get default quit message
     *
     * @param Player $player
     * @param Level $origin
     * @param Level $target
     *
     * @return string The default world change message
     */
    public function getDefaultWorldChangeMessage(Player $player, Level $origin, Level $target){
    	$cfg = $this->getConfig()->getAll();
    	$message = $cfg["WorldChange"]["message"];
    	$message = str_replace("{ORIGIN}", $origin->getName(), $message);
    	$message = str_replace("{TARGET}", $target->getName(), $message);
    	$message = str_replace("{PLAYER}", $player->getName(), $message);
    	$message = str_replace("{MAXPLAYERS}", $this->getServer()->getMaxPlayers(), $message);
    	$message = str_replace("{TOTALPLAYERS}", count($this->getServer()->getOnlinePlayers()), $message);
    	$message = str_replace("{TIME}", date($cfg["datetime-format"]), $message);
    	return $this->translateColors("&", $message);
    }
    
    /**
     * Get current world change message
     *
     * @return string The current world change message
     */
    public function getWorldChangeMessage(){
    	return $this->message_world_change;
    }
    
    /**
     * Set current world change message
     *
     * @param string $message The message
     */
    public function setWorldChangeMessage($message){
    	$this->message_world_change = $message;
    }
    
    /**
     * Check if death messages are custom
     * 
     * @param EntityDeathEvent $cause Check message by cause
     *
     * @return boolean
     */
    public function isDeathCustom($cause = null){
        $cfg = $this->getConfig()->getAll();
        if($cause instanceof EntityDamageEvent){
        	if($cause->getCause() == EntityDamageEvent::CAUSE_CONTACT){
        		return $cfg["Death"]["death-contact-message"]["custom"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_ENTITY_ATTACK){
        		return $cfg["Death"]["kill-message"]["custom"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_PROJECTILE){
        		return $cfg["Death"]["death-projectile-message"]["custom"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_SUFFOCATION){
        		return $cfg["Death"]["death-suffocation-message"]["custom"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_FALL){
        		return $cfg["Death"]["death-fall-message"]["custom"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_FIRE){
        		return $cfg["Death"]["death-fire-message"]["custom"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_FIRE_TICK){
        		return $cfg["Death"]["death-on-fire-message"]["custom"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_LAVA){
        		return $cfg["Death"]["death-lava-message"]["custom"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_DROWNING){
        		return $cfg["Death"]["death-drowning-message"]["custom"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_ENTITY_EXPLOSION || $cause->getCause() == EntityDamageEvent::CAUSE_BLOCK_EXPLOSION){
        		return $cfg["Death"]["death-explosion-message"]["custom"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_VOID){
        		return $cfg["Death"]["death-void-message"]["custom"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_SUICIDE){ 
        		return $cfg["Death"]["death-suicide-message"]["custom"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_MAGIC){
        		return $cfg["Death"]["death-magic-message"]["custom"];
        	}else{
        		return $cfg["Death"]["custom"];
        	}
    	}else{
    		return $cfg["Death"]["custom"];
    	}
    }
    
    /**
     * Check if death messages are hidden
     * 
     * @param EntityDamageEvent $cause Check message by cause
     *
     * @return boolean
     */
    public function isDeathHidden($cause = null){
    	$cfg = $this->getConfig()->getAll();
        if($cause instanceof EntityDamageEvent){
        	if($cause->getCause() == EntityDamageEvent::CAUSE_CONTACT){
        		return $cfg["Death"]["death-contact-message"]["hide"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_ENTITY_ATTACK){
        		return $cfg["Death"]["kill-message"]["hide"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_PROJECTILE){
        		return $cfg["Death"]["death-projectile-message"]["hide"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_SUFFOCATION){
        		return $cfg["Death"]["death-suffocation-message"]["hide"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_FALL){
        		return $cfg["Death"]["death-fall-message"]["hide"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_FIRE){
        		return $cfg["Death"]["death-fire-message"]["hide"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_FIRE_TICK){
        		return $cfg["Death"]["death-on-fire-message"]["hide"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_LAVA){
        		return $cfg["Death"]["death-lava-message"]["hide"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_DROWNING){
        		return $cfg["Death"]["death-drowning-message"]["hide"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_ENTITY_EXPLOSION || $cause->getCause() == EntityDamageEvent::CAUSE_BLOCK_EXPLOSION){
        		return $cfg["Death"]["death-explosion-message"]["hide"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_VOID){
        		return $cfg["Death"]["death-void-message"]["hide"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_SUICIDE){ 
        		return $cfg["Death"]["death-suicide-message"]["hide"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_MAGIC){
        		return $cfg["Death"]["death-magic-message"]["hide"];
        	}else{
        		return $cfg["Death"]["hide"];
        	}
    	}else{
    		return $cfg["Death"]["hide"];
    	}
    }
    
    /**
     * Get default death message related to the specified cause
     *
     * @param Player $player
     * @param EntityDamageEvent $cause Get message related to the specified cause
     *
     * @return string The default death message related to the specified cause
     */
    public function getDefaultDeathMessage(Player $player, $cause = null){
    	$cfg = $this->getConfig()->getAll();
        if($cause instanceof EntityDamageEvent){
        	if($cause->getCause() == EntityDamageEvent::CAUSE_CONTACT){
        		$message = $cfg["Death"]["death-contact-message"]["message"];
        		if($cause instanceof EntityDamageByBlockEvent){
        			$message = str_replace("{BLOCK}", $cause->getDamager()->getName(), $message);
        		}else{
        			$message = str_replace("{BLOCK}", "Unknown", $message);
        		}
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_ENTITY_ATTACK){
        		$message = $cfg["Death"]["kill-message"]["message"];
        	    $killer = $cause->getDamager();
        		if($killer instanceof Living){
        			$message = str_replace("{KILLER}", $killer->getName(), $message);
        		}else{
        			$message = str_replace("{KILLER}", "Unknown", $message);
        		}
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_PROJECTILE){
        		$message = $cfg["Death"]["death-projectile-message"]["message"];
        		$killer = $cause->getDamager();
        		if($killer instanceof Living){
        			$message = str_replace("{KILLER}", $killer->getName(), $message);
        		}else{
        			$message = str_replace("{KILLER}", "Unknown", $message);
        		}
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_SUFFOCATION){
        		$message = $cfg["Death"]["death-suffocation-message"]["message"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_FALL){
        		$message = $cfg["Death"]["death-fall-message"]["message"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_FIRE){
        		$message = $cfg["Death"]["death-fire-message"]["message"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_FIRE_TICK){
        		$message = $cfg["Death"]["death-on-fire-message"]["message"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_LAVA){
        		$message = $cfg["Death"]["death-lava-message"]["message"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_DROWNING){
        		$message = $cfg["Death"]["death-drowning-message"]["message"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_ENTITY_EXPLOSION || $cause->getCause() == EntityDamageEvent::CAUSE_BLOCK_EXPLOSION){
        		$message = $cfg["Death"]["death-explosion-message"]["message"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_VOID){
        		$message = $cfg["Death"]["death-void-message"]["message"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_SUICIDE){
        		$message = $cfg["Death"]["death-suicide-message"]["message"];
        	}elseif($cause->getCause() == EntityDamageEvent::CAUSE_MAGIC){
        		$message = $cfg["Death"]["death-magic-message"]["message"];
        	}else{
        		$message = $cfg["Death"]["message"];
        	}
    	}else{
    		$message = $cfg["Death"]["message"];
    	}
    	$message = str_replace("{PLAYER}", $player->getName(), $message);
    	$message = str_replace("{MAXPLAYERS}", $this->getServer()->getMaxPlayers(), $message);
    	$message = str_replace("{TOTALPLAYERS}", count($this->getServer()->getOnlinePlayers()), $message);
    	$message = str_replace("{TIME}", date($cfg["datetime-format"]), $message);
    	return $this->translateColors("&", $message);
    }
    
    /**
     * Get current death message
     *
     * @return string The current death message
     */
    public function getDeathMessage(){
    	return $this->message_death;
    }
    
    /**
     * Set current death message
     *
     * @param string $message The message
     */
    public function setDeathMessage($message){
    	$this->message_death = $message;
    }

}
?>---
datetime-format: "H:i:s"
Motd:
  update-timeout: 1
  custom: true
  message: "&e[{TIME}] &aWelcome to your server! &n&b[{TOTALPLAYERS}/{MAXPLAYERS}]"
OutdatedClient:
  custom: true
  message: "&cYour MCPE client is outdated!"
OutdatedServer:
  custom: true
  message: "&cOops! Server outdated!"
WhitelistedServer:
  custom: true
  message: "&c&oThis Server is whitelisted!"
FullServer:
  custom: true
  message: "&e{PLAYER}&b, The Server is full &c[{TOTALPLAYERS}/{MAXPLAYERS}]&b!\n&l&dTry to join later :)"
FirstJoin:
  enable: true
  message: "&2[{TIME}] &a{PLAYER}&d joined the game for the first time."
Join:
  hide: false
  custom: true
  message: "&2[{TIME}] &a{PLAYER}&e joined the game."
Quit:
  hide: true
  custom: false
  message: "&4[{TIME}] &c{PLAYER}&e has left the game"
WorldChange:
  enable: true
  message: "&2[{TIME}] &a{PLAYER}&e moved from &c{ORIGIN}&e to &a{TARGET}"
Death:
  hide: false
  custom: true
  message: "&c{PLAYER} died"
  death-contact-message:
    hide: false
    custom: true
    message: "&cOops! {PLAYER} was killed by {BLOCK}"
  kill-message:
    hide: false
    custom: true
    message: "&9{PLAYER} &ewas killed by &c{KILLER}"
  death-projectile-message:
    hide: false
    custom: true
    message: "&c{PLAYER} was killed by {KILLER} by arrow"
  death-suffocation-message:
    hide: false
    custom: true
    message: "&c{PLAYER} suffocated"
  death-fall-message:
    hide: false
    custom: true
    message: "&c{PLAYER} fell from a high place"
  death-fire-message:
    hide: false
    custom: true
    message: "&c{PLAYER} went up in flames"
  death-on-fire-message:
    hide: false
    custom: true
    message: "&c{PLAYER} burned"
  death-lava-message:
    hide: false
    custom: true
    message: "&c{PLAYER} tried to swim in lava"
  death-drowning-message:
    hide: false
    custom: true
    message: "&c{PLAYER} drowned"
  death-explosion-message:
    hide: false
    custom: true
    message: "&c{PLAYER} exploded"
  death-void-message:
    hide: false
    custom: true
    message: "&c{PLAYER} fell into the void"
  death-suicide-message:
    hide: false
    custom: true
    message: "&c{PLAYER} committed suicide"
  death-magic-message:
    hide: false
    custom: true
    message: "&c{PLAYER} was killed by a spell"
...<?php

/*
 * CustomAlerts (v1.6) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 05/06/2015 10:52 AM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/CustomAlerts/blob/master/LICENSE)
 */

namespace CustomAlerts\Commands;

use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\Player;
use pocketmine\plugin\PluginBase;

use CustomAlerts\CustomAlerts;

class Commands extends PluginBase implements CommandExecutor {

	public function __construct(CustomAlerts $plugin){
        $this->plugin = $plugin;
    }
    
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) {
    	$fcmd = strtolower($cmd->getName());
    	switch($fcmd){
    		case "customalerts":
    			if(isset($args[0])){
    				$args[0] = strtolower($args[0]);
    				if($args[0]=="help"){
    					if($sender->hasPermission("customalerts.help")){
    					    $sender->sendMessage($this->plugin->translateColors("&", "&b-- &aAvailable Commands &b--"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&d/calerts help &b-&a Show help about this plugin"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&d/calerts info &b-&a Show info about this plugin"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&d/calerts reload &b-&a Reload the config"));
    						break;
    					}else{
    						$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    						break;
    					}
    				}elseif($args[0]=="info"){
    					if($sender->hasPermission("customalerts.info")){
    						$sender->sendMessage($this->plugin->translateColors("&", CustomAlerts::PREFIX . "&aCustomAlerts &dv" . CustomAlerts::VERSION . " &adeveloped by&d " . CustomAlerts::PRODUCER));
    						$sender->sendMessage($this->plugin->translateColors("&", CustomAlerts::PREFIX . "&aWebsite &d" . CustomAlerts::MAIN_WEBSITE));
    				        break;
    					}else{
    						$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    						break;
    					}
    				}elseif($args[0]=="reload"){
    					if($sender->hasPermission("customalerts.reload")){
    						$this->plugin->reloadConfig();
    						//Reload Motd
    						if(!CustomAlerts::getAPI()->isMotdCustom()){
    							CustomAlerts::getAPI()->setMotdMessage($this->plugin->getServer()->getMotd());
    						}
    						$sender->sendMessage($this->plugin->translateColors("&", CustomAlerts::PREFIX . "&aConfiguration Reloaded."));
    				        break;
    					}else{
    						$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    						break;
    					}
    				}else{
    					if($sender->hasPermission("customalerts")){
    						$sender->sendMessage($this->plugin->translateColors("&",  CustomAlerts::PREFIX . "&cSubcommand &a" . $args[0] . " &cnot found. Use &a/calerts help &cto show available commands"));
    						break;
    					}else{
    						$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    						break;
    					}
    				}
    				}else{
    					if($sender->hasPermission("customalerts.help")){
    						$sender->sendMessage($this->plugin->translateColors("&", "&b-- &aAvailable Commands &b--"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&d/calerts help &b-&a Show help about this plugin"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&d/calerts info &b-&a Show info about this plugin"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&d/calerts reload &b-&a Reload the config"));
    						break;
    					}else{
    						$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    						break;
    					}
    				}
    			}
    	}
}
?><?php

/*
 * CustomAlerts (v1.6) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 28/05/2015 04:29 PM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/CustomAlerts/blob/master/LICENSE)
 */

namespace CustomAlerts;

use pocketmine\event\entity\EntityDeathEvent;
use pocketmine\event\entity\EntityLevelChangeEvent;
use pocketmine\event\Listener;
use pocketmine\event\player\PlayerDeathEvent;
use pocketmine\event\player\PlayerEvent;
use pocketmine\event\player\PlayerJoinEvent;
use pocketmine\event\player\PlayerPreLoginEvent;
use pocketmine\event\player\PlayerQuitEvent;
use pocketmine\event\server\DataPacketReceiveEvent;
use pocketmine\network\protocol\DataPacket;
use pocketmine\network\protocol\Info;
use pocketmine\Player;
use pocketmine\Server;

use CustomAlerts\Events\CustomAlertsDeathEvent;
use CustomAlerts\Events\CustomAlertsFullServerKickEvent;
use CustomAlerts\Events\CustomAlertsJoinEvent;
use CustomAlerts\Events\CustomAlertsMotdUpdateEvent;
use CustomAlerts\Events\CustomAlertsOutdatedClientKickEvent;
use CustomAlerts\Events\CustomAlertsOutdatedServerKickEvent;
use CustomAlerts\Events\CustomAlertsQuitEvent;
use CustomAlerts\Events\CustomAlertsWhitelistKickEvent;
use CustomAlerts\Events\CustomAlertsWorldChangeEvent;

class EventListener implements Listener {
	
	public function __construct(CustomAlerts $plugin){
        $this->plugin = $plugin;
    }
    
    public function onReceivePacket(DataPacketReceiveEvent $event){
    	$player = $event->getPlayer();
    	$packet = $event->getPacket();
    	if($packet->pid() == Info::LOGIN_PACKET){
    		if($packet->protocol1 < Info::CURRENT_PROTOCOL){
    			//Check if outdated client message is custom
    			if(CustomAlerts::getAPI()->isOutdatedClientMessageCustom()){
    				CustomAlerts::getAPI()->setOutdatedClientMessage(CustomAlerts::getAPI()->getDefaultOutdatedClientMessage($player));
    			}
    			//Outdated Client Kick Event
    			$this->plugin->getServer()->getPluginManager()->callEvent(new CustomAlertsOutdatedClientKickEvent($player));
    			//Check if Outdated Client message is not empty
    			if(CustomAlerts::getAPI()->getOutdatedClientMessage() != null){
    				$player->close("", CustomAlerts::getAPI()->getOutdatedClientMessage());
    				$event->setCancelled(true);
    			}
    		}elseif($packet->protocol1 > Info::CURRENT_PROTOCOL){
    			//Check if outdated server message is custom
    			if(CustomAlerts::getAPI()->isOutdatedServerMessageCustom()){
    				CustomAlerts::getAPI()->setOutdatedServerMessage(CustomAlerts::getAPI()->getDefaultOutdatedServerMessage($player));
    			}
    			//Outdated Server Kick Event
    			$this->plugin->getServer()->getPluginManager()->callEvent(new CustomAlertsOutdatedServerKickEvent($player));
    			//Check if Outdated Server message is not empty
    			if(CustomAlerts::getAPI()->getOutdatedServerMessage() != null){
    				$player->close("", CustomAlerts::getAPI()->getOutdatedServerMessage());
    				$event->setCancelled(true);
    			}
    		}
    	}
    }
    
    /**
     * @param PlayerPreLoginEvent $event
     *
     * @priority HIGHEST
     */
    public function onPlayerPreLogin(PlayerPreLoginEvent $event){
    	$player = $event->getPlayer();
    	if(count($this->plugin->getServer()->getOnlinePlayers()) - 1 < $this->plugin->getServer()->getMaxPlayers()){
    		if(!$this->plugin->getServer()->isWhitelisted($event->getPlayer()->getName())){
    			//Check if Whitelist message is custom
    			if(CustomAlerts::getAPI()->isWhitelistMessageCustom()){
    				CustomAlerts::getAPI()->setWhitelistMessage(CustomAlerts::getAPI()->getDefaultWhitelistMessage($player));
    			}
    			//Whitelist Kick Event
    			$this->plugin->getServer()->getPluginManager()->callEvent(new CustomAlertsWhitelistKickEvent($player));
    			//Check if Whitelist message is not empty
    			if(CustomAlerts::getAPI()->getWhitelistMessage() != null){
    				$player->close("", CustomAlerts::getAPI()->getWhitelistMessage());
    				$event->setCancelled(true);
    			}
    		}
    	}else{
    		//Check if Full Server message is custom
    		if(CustomAlerts::getAPI()->isFullServerMessageCustom()){
    			CustomAlerts::getAPI()->setFullServerMessage(CustomAlerts::getAPI()->getDefaultFullServerMessage($player));
    		}
    		//Full Server Kick Event
    		$this->plugin->getServer()->getPluginManager()->callEvent(new CustomAlertsFullServerKickEvent($player));
    		//Check if Full Server message is not empty
    		if(CustomAlerts::getAPI()->getFullServerMessage() != null){
    			$player->close("", CustomAlerts::getAPI()->getFullServerMessage());
    			$event->setCancelled(true);
    		}
    	}
    }
    
    /**
     * @param PlayerJoinEvent $event
     *
     * @priority HIGHEST
     */
    public function onPlayerJoin(PlayerJoinEvent $event){
    	$player = $event->getPlayer();
    	//Motd Update
    	//Check if Motd message is custom
    	if(CustomAlerts::getAPI()->isMotdCustom()){
    		CustomAlerts::getAPI()->setMotdMessage(CustomAlerts::getAPI()->getDefaultMotdMessage());
    	}else{
    		CustomAlerts::getAPI()->setMotdMessage($this->plugin->translateColors("&", $this->plugin->getServer()->getMotd()));
    	}
    	//Motd Update Event
    	$this->plugin->getServer()->getPluginManager()->callEvent(new CustomAlertsMotdUpdateEvent($this->plugin->getServer()->getMotd()));
    	$this->plugin->getServer()->getNetwork()->setName(CustomAlerts::getAPI()->getMotdMessage());
    	//Join Message
    	$status = 0;
    	CustomAlerts::getAPI()->setJoinMessage($event->getJoinMessage());
    	//Get First Join
    	if(CustomAlerts::getAPI()->hasJoinedFirstTime($player)){
    		//Register FirstJoin
    		CustomAlerts::getAPI()->registerFirstJoin($player);
    		//Check if FirstJoin message is enabled
    		if(CustomAlerts::getAPI()->isDefaultFirstJoinMessageEnabled()){
    			CustomAlerts::getAPI()->setJoinMessage(CustomAlerts::getAPI()->getDefaultFirstJoinMessage($player));
    			$status = 1;
    		}
    	}
    	//Default Join Message
    	if($status == 0){
    		//Check if Join message is hidden
    		if(CustomAlerts::getAPI()->isDefaultJoinMessageHidden()){
    			CustomAlerts::getAPI()->setJoinMessage("");
    		}else{
    			//Check if Join message is custom
    			if(CustomAlerts::getAPI()->isDefaultJoinMessageCustom()){
    				CustomAlerts::getAPI()->setJoinMessage(CustomAlerts::getAPI()->getDefaultJoinMessage($player));
    			}
    		}
    	}
    	//Join Event
    	$this->plugin->getServer()->getPluginManager()->callEvent(new CustomAlertsJoinEvent($player, $event->getJoinMessage()));
    	$event->setJoinMessage(CustomAlerts::getAPI()->getJoinMessage());
    }
    
    /**
     * @param PlayerQuitEvent $event
     *
     * @priority HIGHEST
     */
    public function onPlayerQuit(PlayerQuitEvent $event){
    	 $player = $event->getPlayer();
    	 //Motd Update
    	 if(CustomAlerts::getAPI()->isMotdCustom()){
    	 	CustomAlerts::getAPI()->setMotdMessage(CustomAlerts::getAPI()->getDefaultMotdMessage());
    	 }else{
    	 	CustomAlerts::getAPI()->setMotdMessage($this->plugin->translateColors("&", $this->plugin->getServer()->getMotd()));
    	 }
    	 //Motd Update Event
    	 $this->plugin->getServer()->getPluginManager()->callEvent(new CustomAlertsMotdUpdateEvent($this->plugin->getServer()->getMotd()));
    	 $this->plugin->getServer()->getNetwork()->setName(CustomAlerts::getAPI()->getMotdMessage());
    	 CustomAlerts::getAPI()->setQuitMessage($event->getQuitMessage());
    	 //Check if Quit message is hidden
    	 if(CustomAlerts::getAPI()->isQuitHidden()){
    	 	CustomAlerts::getAPI()->setQuitMessage("");
    	 }else{
    	 	//Check if Quit message is custom
    	 	if(CustomAlerts::getAPI()->isQuitCustom()){
    	 		CustomAlerts::getAPI()->setQuitMessage(CustomAlerts::getAPI()->getDefaultQuitMessage($player));
    	 	}
    	 }
    	 //Quit Event
    	 $this->plugin->getServer()->getPluginManager()->callEvent(new CustomAlertsQuitEvent($player, $event->getQuitMessage()));
    	 $event->setQuitMessage(CustomAlerts::getAPI()->getQuitMessage());
    }
    
    public function onWorldChange(EntityLevelChangeEvent $event){
    	$entity = $event->getEntity();
    	CustomAlerts::getAPI()->setWorldChangeMessage("");
    	//Check if the Entity is a Player
    	if($entity instanceof Player){
    		$player = $entity;
    		$origin = $event->getOrigin();
    		$target = $event->getTarget();
    		//Check if Default WorldChange Message is enabled
    		if(CustomAlerts::getAPI()->isDefaultWorldChangeMessageEnabled()){
    			CustomAlerts::getAPI()->setWorldChangeMessage(CustomAlerts::getAPI()->getDefaultWorldChangeMessage($player, $origin, $target));
    		}
    	    //WorldChange Event
    	    $this->plugin->getServer()->getPluginManager()->callEvent(new CustomAlertsWorldChangeEvent($player, $origin, $target));
    		if(CustomAlerts::getAPI()->getWorldChangeMessage() != ""){
    			Server::getInstance()->broadcastMessage(CustomAlerts::getAPI()->getWorldChangeMessage());
    		}
    	}
    }
    
    
    /**
     * @param PlayerDeathEvent $event
     *
     * @priority HIGHEST
     */
    public function onPlayerDeath(PlayerDeathEvent $event){
    	$player = $event->getEntity();
    	CustomAlerts::getAPI()->setDeathMessage($event->getDeathMessage());
    	if($player instanceof Player){
    		$cause = $player->getLastDamageCause();
    		if(CustomAlerts::getAPI()->isDeathHidden($cause)){
    			CustomAlerts::getAPI()->setDeathMessage("");
    		}else{
    			//Check if Death message is custom
    			if(CustomAlerts::getAPI()->isDeathCustom($cause)){
    				CustomAlerts::getAPI()->setDeathMessage(CustomAlerts::getAPI()->getDefaultDeathMessage($player, $cause));
    			}
    		}
            //Death Event
    	    $this->plugin->getServer()->getPluginManager()->callEvent(new CustomAlertsDeathEvent($player, $cause));
    		$event->setDeathMessage(CustomAlerts::getAPI()->getDeathMessage());
    	}
    }
	
}
?><?php

/*
 * CustomAlerts (v1.6) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 05/06/2015 10:51 AM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/CustomAlerts/blob/master/LICENSE)
 */

namespace CustomAlerts;

use pocketmine\scheduler\PluginTask;
use pocketmine\utils\TextFormat;

use CustomAlerts\Events\CustomAlertsMotdUpdateEvent;

class MotdTask extends PluginTask {
	
    public function __construct(CustomAlerts $plugin){
    	parent::__construct($plugin);
        $this->plugin = $plugin;
        $this->plugin = $this->getOwner();
        $this->counter = 0;
    }
    
    public function onRun($tick){
    	$cfg = $this->plugin->getConfig()->getAll();
    	$this->counter += 1;
    	if($this->counter >= $cfg["Motd"]["update-timeout"]){
    		//Check if Motd message is custom
    		if(CustomAlerts::getAPI()->isMotdCustom()){
    			CustomAlerts::getAPI()->setMotdMessage(CustomAlerts::getAPI()->getDefaultMotdMessage());
    		}
			$this->plugin->getServer()->getPluginManager()->callEvent(new CustomAlertsMotdUpdateEvent($this->plugin->getServer()->getMotd()));
    		$this->counter = 0;
    	}
    }
}
?>
<?php

/*
 * CustomAlerts (v1.6) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 09/05/2015 01:13 PM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/CustomAlerts/blob/master/LICENSE)
 */

namespace CustomAlerts\Events;

use pocketmine\event\plugin\PluginEvent;
use pocketmine\Player;

class CustomAlertsJoinEvent extends PluginEvent {
	
	public static $handlerList = null;
	
	/** @var Player $player */
	private $player;
	
	/** @var string $pocketminemessage The default PocketMine join message */
	private $pocketminemessage;
	
	/**
	 * @param Player $player
	 * @param string $pocketminemessage The default PocketMine join message
	 */
	public function __construct(Player $player, $pocketminemessage){
		$this->player = $player;
		$this->pocketminemessage = $pocketminemessage;
	}

	/**
	 * Get join event player
	 * 
	 * @return Player
	 */
	public function getPlayer(){
		return $this->player;
	}
	
	/**
	 * Get default PocketMine join message
	 * 
	 * @return string
	 */
	public function getPocketMineJoinMessage(){
		return $this->pocketminemessage;
	}
}
?><?php

/*
 * CustomAlerts (v1.6) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 09/05/2015 01:14 PM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/CustomAlerts/blob/master/LICENSE)
 */

namespace CustomAlerts\Events;

use pocketmine\event\plugin\PluginEvent;
use pocketmine\Player;

class CustomAlertsQuitEvent extends PluginEvent {
	
	public static $handlerList = null;
	
	/** @var Player $player */
	private $player;
	
	/** @var string $pocketminemessage The default PocketMine quit message */
	private $pocketminemessage;
	
	/**
	 * @param Player $player
	 * @param string $pocketminemessage The default PocketMine quit message
	 */
	public function __construct(Player $player, $pocketminemessage){
		$this->player = $player;
		$this->pocketminemessage = $pocketminemessage;
	}
	
	/**
	 * Get quit event player
	 *
	 * @return Player
	 */
	public function getPlayer(){
		return $this->player;
	}
	
	/**
	 * Get default PocketMine quit message
	 *
	 * @return string
	 */
	public function getPocketMineQuitMessage(){
		return $this->pocketminemessage;
	}
}
?><?php

/*
 * CustomAlerts (v1.6) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 09/05/2015 01:04 PM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/CustomAlerts/blob/master/LICENSE)
 */

namespace CustomAlerts\Events;

use pocketmine\event\plugin\PluginEvent;
use pocketmine\level\Level;
use pocketmine\Player;

class CustomAlertsWorldChangeEvent extends PluginEvent {
	
	public static $handlerList = null;
	
	/** @var Player $player */
	private $player;
	
	/** @var Level $origin */
	private $origin;
	
	/** @var Level $target */
	private $target;
	
	/**
	 * @param Player $player
	 * @param Level $origin
	 * @param Level $target
	 */
	public function __construct(Player $player, Level $origin, Level $target){
		$this->player = $player;
		$this->origin = $origin;
		$this->target = $target;
	}
	
	/**
	 * Get world change event player
	 *
	 * @return Player
	 */
	public function getPlayer(){
		return $this->player;
	}
	
	/**
	 * Get origin level
	 *
	 * @return Level
	 */
	public function getOrigin(){
		return $this->origin;
	}
	
	/**
	 * Get target level
	 *
	 * @return Level
	 */
	public function getTarget(){
		return $this->target;
	}
	
}
?><?php

/*
 * CustomAlerts (v1.6) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 09/05/2015 01:12 PM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/CustomAlerts/blob/master/LICENSE)
 */

namespace CustomAlerts\Events;

use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\event\plugin\PluginEvent;
use pocketmine\level\Level;
use pocketmine\Player;

class CustomAlertsDeathEvent extends PluginEvent {
	
	public static $handlerList = null;
	
	/** @var Player $player */
	private $player;
	
	/** @var EntityDamageEvent|null $cause */
	private $cause;
	
	/**
	 * @param Player $player
	 * @param Level $origin
	 * @param Level $target
	 */
	public function __construct(Player $player, $cause = null){
		$this->player = $player;
		$this->cause = $cause;
	}
	
	/**
	 * Get death event player
	 *
	 * @return Player
	 */
	public function getPlayer(){
		return $this->player;
	}
	
	/**
	 * Get death event cause
	 *
	 * @return EntityDamageEvent|null
	 */
	public function getCause(){
		return $this->cause;
	}
	
}
?><?php

/*
 * CustomAlerts (v1.6) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 09/05/2015 01:21 PM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/CustomAlerts/blob/master/LICENSE)
 */

namespace CustomAlerts\Events;

use pocketmine\event\plugin\PluginEvent;
use pocketmine\Player;

class CustomAlertsMotdUpdateEvent extends PluginEvent {
	
	public static $handlerList = null;
	
	/** @var string $pocketminemotd The default PocketMine motd message */
	private $pocketminemessage;
	
	/**
	 * @param string $pocketminemessage The default PocketMine motd message
	 */
	public function __construct($pocketminemessage){
		$this->pocketminemessage = $pocketminemessage;
	}
	
	/**
	 * Get default PocketMine Motd message
	 * 
	 * @return string
	 */
	public function getPocketMineMotd(){
		return $this->pocketminemessage;
	}
}
?><?php

/*
 * CustomAlerts (v1.6) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 09/05/2015 01:48 PM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/CustomAlerts/blob/master/LICENSE)
 */

namespace CustomAlerts\Events;

use pocketmine\event\plugin\PluginEvent;
use pocketmine\Player;

class CustomAlertsOutdatedClientKickEvent extends PluginEvent {
	
	public static $handlerList = null;
	
	/** @var Player $player */
	private $player;
	
	/**
	 * @param Player $player
	 */
	public function __construct(Player $player){
		$this->player = $player;
	}

	/**
	 * Get outdated client kick event player
	 * 
	 * @return Player
	 */
	public function getPlayer(){
		return $this->player;
	}
}
?>