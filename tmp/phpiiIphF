name: HealthStats
version: 1.1.1
api: [1.3.1]
author: Striker209_MPE
description: A plugin that display players' health in their NameTag !
main: HealthStats\HealthStats

commands:
 hs:
  description: "Enable or disable health stats"
  usage: "/hs"
<?php

namespace HealthStats;

use pocketmine\command\Command;
use pocketmine\command\CommandSender;
use pocketmine\event\Listener;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\player\PlayerJoinEvent;
use pocketmine\event\entity\EntityRegainHealthEvent;
use pocketmine\Player;
use pocketmine\plugin\PluginBase;
class HealthStats extends PluginBase implements Listener{
		
	public function onEnable(){ 
		$this->getLogger()->info("Plugin is now loading...");
		$this->isEnabled = true;
		$this->getServer()->getPluginManager()->registerEvents($this, $this);
		$this->getLogger()->info("Loaded!");
	}

	public function onDisable(){
		$this->getLogger()->info("Plugin has been disabled");
	}
	public function onJoin(PlayerJoinEvent $event){
		$player = $event->getPlayer();
		
		$this->renderNametag($player);
	}

	public function renderNameTag($player){
		$username = $player->getName();
		
		if($this->isEnabled){
			$player->setNameTag($player->getName()." ".$player->getHealth()."/".$player->getMaxHealth().""); // When we will be able to, add "â™¥" :-)
		}else{
			$player->setNameTag($player->getName());
		}
	}
	
	public function onCommand(CommandSender $sender, Command $command, $label, array $args){
		$username = $sender->getName();
		switch($command->getName()){
			case "hs":
				if($sender->isOp()){
					if($this->isEnabled !== false){
						$this->getServer()->broadcastMessage("[HealthStats] ".$username." has switch health stats off!");
						$this->isEnabled = false;
					}else{
						$this->isEnabled = true;
						$this->getServer()->broadcastMessage("[HealthStats] ".$username." has switch health stats on!");
					}
					foreach($this->getServer()->getOnlinePlayers() as $player){
						$this->renderNameTag($player);
					}
				}else{
					$sender->sendMessage("You don't have permission to use this command");
				}
				return true;
			break;
		}
	}
	
	public function onEntityDamage(EntityDamageEvent $event){
		$entity = $event->getEntity();
		if($entity instanceof Player){
			$player = $entity->getPlayer();
			$this->renderNameTag($player);
		}
	}
	
	public function onEntityRegainHealth(EntityRegainHealthEvent $event){
		$entity = $event->getEntity();
		if($entity instanceof Player){
			$player = $entity->getPlayer();
			$this->renderNameTag($player);
		}
	}
}
